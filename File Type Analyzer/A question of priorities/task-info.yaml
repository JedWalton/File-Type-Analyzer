type: edu
custom_name: stage4
files:
- name: src/analyzer/Main.java
  visible: true
  text: |
    package analyzer;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/Clue.java
  visible: false
  text: |2

    public class Clue {
        public String first;
        public String second;
        public String feedback;

        public Clue(String first, String second, String feedback) {
            this.first = first;
            this.second = second;
            this.feedback = feedback;
        }
    }
  learner_created: false
- name: test/MainTest.java
  visible: false
  text: "\nimport analyzer.Main;\nimport org.hyperskill.hstest.stage.StageTest;\n\
    import org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testcase.TestCase;\n\
    import org.junit.AfterClass;\nimport org.junit.Assert;\nimport org.junit.BeforeClass;\n\
    \nimport java.io.File;\nimport java.io.IOException;\nimport java.lang.management.ManagementFactory;\n\
    import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.List;\n\
    \npublic class MainTest extends StageTest<Clue> {\n    private static final String\
    \ CURRENT_DIR = System.getProperty(\"user.dir\") + File.separator;\n    \n   \
    \ private static String testFolder = \"test_files\";\n    private static String\
    \ files = testFolder + File.separator;\n    \n    private static String patternsDb\
    \ = \"patterns.db\";\n    private static final String patterns =\n        \"1;\\\
    \"%PDF-\\\";\\\"PDF document\\\"\\n\" +\n        \"2;\\\"pmview\\\";\\\"PCP pmview\
    \ config\\\"\\n\" +\n        \"4;\\\"PK\\\";\\\"Zip archive\\\"\\n\" +\n     \
    \   \"5;\\\"vnd.oasis.opendocument.presentation\\\";\\\"OpenDocument presentation\\\
    \"\\n\" +\n        \"6;\\\"W.o.r.d\\\";\\\"MS Office Word 2003\\\"\\n\" +\n  \
    \      \"6;\\\"P.o.w.e.r.P.o.i\\\";\\\"MS Office PowerPoint 2003\\\"\\n\" +\n\
    \        \"7;\\\"word/_rels\\\";\\\"MS Office Word 2007+\\\"\\n\" +\n        \"\
    7;\\\"ppt/_rels\\\";\\\"MS Office PowerPoint 2007+\\\"\\n\" +\n        \"7;\\\"\
    xl/_rels\\\";\\\"MS Office Excel 2007+\\\"\\n\" +\n        \"8;\\\"-----BEGIN\\\
    \\ CERTIFICATE-----\\\";\\\"PEM certificate\\\"\\n\" +\n        \"9;\\\"ftypjp2\\\
    \";\\\"ISO Media JPEG 2000\\\"\\n\" +\n        \"9;\\\"ftypiso2\\\";\\\"ISO Media\
    \ MP4 Base Media v2\\\"\\n\";\n\n\n    @Override\n    public List<TestCase<Clue>>\
    \ generate() {\n        return List.of(\n            //Testing basic cases\n \
    \           //PDF\n            new TestCase<Clue>()\n                .addArguments(new\
    \ String[]\n                    {testFolder, patternsDb})\n                .addFile(patternsDb,\
    \ patterns)\n                .addFile(files + \"doc.pdf\", \"PFDF%PDF-PDF\")\n\
    \                .addFile(files + \"text.pdf\", \"PFPDF-PDFABC\")\n          \
    \      .setAttach(new Clue(\n                    \"doc.pdf: PDF document\",\n\
    \                    \"text.pdf: Unknown file type\",\n                    \"\
    Wrong answer for files with PDF documents\")),\n\n            //Zip archive\n\
    \            new TestCase<Clue>()\n                .addArguments(new String[]\
    \ {testFolder, patternsDb})\n                .addFile(patternsDb, patterns)\n\
    \                .addFile(files + \"doc.zip\", \"PCK\")\n                .addFile(files\
    \ + \"doc1.zip\", \"PKC\")\n                .setAttach(new Clue(\n           \
    \         \"doc.zip: Unknown file type\" ,\n                    \"doc1.zip: Zip\
    \ archive\",\n                    \"Wrong answer for files with Zip archives\"\
    )),\n\n            //PCP pmview config\n            new TestCase<Clue>()\n   \
    \             .addArguments(new String[]\n                    {testFolder, patternsDb})\n\
    \                .addFile(patternsDb, patterns)\n                .addFile(files\
    \ + \"main\", \"pmview\")\n                .addFile(files + \"main.config\", \"\
    pmconfigview\")\n                .setAttach(new Clue(\n                    \"\
    main: PCP pmview config\",\n                    \"main.config: Unknown file type\"\
    ,\n                    \"Wrong answer for PCP pmview config files\")),\n\n   \
    \         //OpenDocument presentation\n            new TestCase<Clue>()\n    \
    \            .addArguments(new String[]\n                    {testFolder, patternsDb})\n\
    \                .addFile(patternsDb, patterns)\n                .addFile(files\
    \ + \"slides1.odp\", \"vnd.oasis.opendocument.presentation\")\n              \
    \  .addFile(files + \"slides2.odp\", \"vnd.oasis.microsoft.presentation\")\n \
    \               .setAttach(new Clue(\n                    \"slides1.odp: OpenDocument\
    \ presentation\",\n                    \"slides2.odp: Unknown file type\",\n \
    \                   \"\")),\n\n            //MS Office Word 2003\n           \
    \ new TestCase<Clue>()\n                .addArguments(new String[]\n         \
    \           {testFolder, patternsDb})\n                .addFile(patternsDb, patterns)\n\
    \                .addFile(files + \"txt.doc\", \"wwwwwwwwW.o.r.d\")\n        \
    \        .addFile(files + \"doc.txt\", \"W.o.r.kwwwwwwww\")\n                .setAttach(new\
    \ Clue(\n                    \"doc.txt: Unknown file type\",\n               \
    \     \"txt.doc: MS Office Word 2003\",\n                    \"Wrong answer for\
    \ Word 2003 files\")),\n\n            //MS Office PowerPoint 2003\n          \
    \  new TestCase<Clue>()\n                .addArguments(new String[]\n        \
    \            {testFolder, patternsDb})\n                .addFile(patternsDb, patterns)\n\
    \                .addFile(files + \"slides1.ptp\", \"P.o.w.e.r.P.o.i\")\n    \
    \            .addFile(files + \"slides2.ptp\", \"P.o.w.e.r.\\\\Sh.o.i\")\n   \
    \             .setAttach(new Clue(\n                    \"slides1.ptp: MS Office\
    \ PowerPoint 2003\",\n                    \"slides2.ptp: Unknown file type\",\n\
    \                    \"\")),\n\n            //MS Office Word 2007+\n         \
    \   new TestCase<Clue>()\n                .addArguments(new String[]\n       \
    \             {testFolder, patternsDb})\n                .addFile(patternsDb,\
    \ patterns)\n                .addFile(files + \"txt.doc\", \"\\\\word/_rels\"\
    )\n                .addFile(files + \"doc.txt\", \"word/\\\\_rels\")\n       \
    \         .setAttach(new Clue(\n                    \"doc.txt: Unknown file type\"\
    ,\n                    \"txt.doc: MS Office Word 2007+\",\n                  \
    \  \"Wrong answer for Word 2007+ files\")),\n\n            //MS Office PowerPoint\
    \ 2007+\n            new TestCase<Clue>()\n                .addArguments(new String[]\n\
    \                    {testFolder, patternsDb})\n                .addFile(patternsDb,\
    \ patterns)\n                .addFile(files + \"pres1.pptx\", \"afeefa%ppt/_relsasdad\"\
    )\n                .addFile(files + \"pres2.pptx\", \"ppasfsfafdaet/_rels\")\n\
    \                .setAttach(new Clue(\n                    \"pres1.pptx: MS Office\
    \ PowerPoint 2007+\",\n                    \"pres2.pptx: Unknown file type\",\n\
    \                    \"\")),\n\n            //MS Office Excel 2007+\n        \
    \    new TestCase<Clue>()\n                .addArguments(new String[]\n      \
    \              {testFolder, patternsDb})\n                .addFile(patternsDb,\
    \ patterns)\n                .addFile(files + \"sheet1.xls\", \"asdaxl/_rels\"\
    )\n                .addFile(files + \"sheet2.xls\", \"x2/_reasdadls\")\n     \
    \           .setAttach(new Clue(\n                    \"sheet1.xls: MS Office\
    \ Excel 2007+\",\n                    \"sheet2.xls: Unknown file type\",\n   \
    \                 \"Wrong answer for Excel 2007+ files\")),\n\n            //PEM\
    \ certificate\n            new TestCase<Clue>()\n                .addArguments(new\
    \ String[]\n                    {testFolder, patternsDb})\n                .addFile(patternsDb,\
    \ patterns)\n                .addFile(files + \"cert.pem\", \"\\\\\\\\\\\\\\\\\
    \\\\aasdw-----BEGIN\\\\ CERTIFICATE-----\")\n                .addFile(files +\
    \ \"cert_core.pem\", \"\\\\\\\\\\\\\\\\\\\\adww-----BEGIN\\\\CERTIFICATE-----\"\
    )\n                .setAttach(new Clue(\n                    \"cert.pem: PEM certificate\"\
    ,\n                    \"cert_core.pem: Unknown file type\",\n               \
    \     \"\")),\n\n            //ISO Media JPEG 2000\n            new TestCase<Clue>()\n\
    \                .addArguments(new String[]\n                    {testFolder,\
    \ patternsDb})\n                .addFile(patternsDb, patterns)\n             \
    \   .addFile(files + \"1.jpg\", \"ftypjp2ddddddaa\")\n                .addFile(files\
    \ + \"2.jpg\", \"ftypdddjp2dadad\")\n                .setAttach(new Clue(\n  \
    \                  \"1.jpg: ISO Media JPEG 2000\",\n                    \"2.jpg:\
    \ Unknown file type\",\n                    \"Wrong answer for ISO Media JPEG\
    \ 2000 files\")),\n\n            //ISO Media MP4 Base Media v2\n            new\
    \ TestCase<Clue>()\n                .addArguments(new String[]\n             \
    \       {testFolder, patternsDb})\n                .addFile(patternsDb, patterns)\n\
    \                .addFile(files + \"tape.jpg\", \"ftypiso2mp4\")\n           \
    \     .addFile(files + \"tape.mp4\", \"mp4ffttypiso2\")\n                .setAttach(new\
    \ Clue(\n                    \"tape.jpg: ISO Media MP4 Base Media v2\",\n    \
    \                \"tape.mp4: Unknown file type\",\n                    \"\")),\n\
    \n            //Testing patterns priority\n            new TestCase<Clue>()\n\
    \                .addArguments(new String[]\n                    {testFolder,\
    \ patternsDb})\n                .addFile(patternsDb, patterns)\n             \
    \   .addFile(files + \"tape2.jpg\", \"PK W.o.r.d\")\n                .addFile(files\
    \ + \"tape2.mp4\", \"%PDF-mp4fftypiso2\")\n                .setAttach(new Clue(\n\
    \                    \"tape2.jpg: MS Office Word 2003\",\n                   \
    \ \"tape2.mp4: ISO Media MP4 Base Media v2\",\n                    \"Wrong answer\
    \ white testing priority\")),\n\n            new TestCase<Clue>()\n          \
    \      .addArguments(new String[]\n                    {testFolder, patternsDb})\n\
    \                .addFile(patternsDb, patterns)\n                .addFile(files\
    \ + \"tape3.jpg\", \"-----BEGIN\\\\ CERTIFICATE-----pmview\")\n              \
    \  .addFile(files + \"tape3.mp4\", \"%PDF-ftypppfW.o.r.dftypiso\")\n         \
    \       .setAttach(new Clue(\n                    \"tape3.jpg: PEM certificate\"\
    ,\n                    \"tape3.mp4: MS Office Word 2003\",\n                 \
    \   \"\"))\n        );\n    }\n\n    @Override\n    public CheckResult check(String\
    \ reply, Clue clue) {\n        String actual = reply.strip();\n\n        if (!actual.contains(clue.first))\
    \ {\n            return CheckResult.wrong(\n                clue.feedback + \"\
    \\n\\n\" +\n                    \"Cannot find a line \" + clue.first + \"\\nYour\
    \ output:\\n\" + actual\n            );\n        }\n\n        if (!actual.contains(clue.second))\
    \ {\n            return CheckResult.wrong(\n                clue.feedback + \"\
    \\n\\n\" +\n                    \"Cannot find a line \" + clue.second + \"\\nYour\
    \ output:\\n\" + actual\n            );\n        }\n\n        return CheckResult.correct();\n\
    \    }\n\n    @BeforeClass\n    public static void generateTestFilesDirectory()\
    \ {\n\n        deleteTestFilesDirectory();\n\n        try {\n            Files.deleteIfExists(Paths.get(CURRENT_DIR\
    \ + testFolder));\n        }\n        catch (IOException ex) {\n\n        }\n\
    \        try {\n            Files.createDirectory(Paths.get(CURRENT_DIR + testFolder));\n\
    \        }\n        catch (IOException ex) {\n\n        }\n    }\n\n\n    @AfterClass\n\
    \    public static void deleteTestFilesDirectory() {\n        try {\n        \
    \    Files.deleteIfExists(Paths.get(CURRENT_DIR + testFolder));\n        }\n \
    \       catch (IOException ex) {\n\n\n        }\n    }\n\n}\n"
  learner_created: false
- name: src/analyzer/SearchAlgorithms.java
  visible: true
  text: |
    package analyzer;

    import java.io.File;
    import java.time.Duration;
    import java.time.Instant;

    public class SearchAlgorithms {

        static void naive(String text, String pattern, String res) {
            Instant startTimeNaive = Instant.now();
            Instant endTimeNaive = Instant.now();

            if (text.contains(pattern)) {
                System.out.println(res);
            } else {
                System.out.println("Unknown file type");
            }

            Duration d = Duration.between(startTimeNaive, endTimeNaive);
            System.out.println("It took " + d.toSeconds() + " seconds");
        }
    }
  learner_created: true
- name: src/analyzer/KNP_algorithmThread.java
  visible: true
  text: |
    package analyzer;

    import java.io.File;
    import java.time.Instant;

    public class KNP_algorithmThread extends Thread {
        String text;
        String pattern;
        String fileType;
        File file;

        public KNP_algorithmThread(String text, String pattern, String fileType, File file) {
            this.text = text;
            this.pattern = pattern;
            this.fileType = fileType;
            this.file = file;
        }

        @Override
        public void run() {
            KNP(text, pattern, fileType, file);
        }

        static void KNP(String text, String pattern, String res, File file) {
            Instant startTimeKMP = Instant.now();
            Instant endTimeKMP = Instant.now();

            if (matchesKNP(pattern, text)) {
                System.out.println(file + ": " + res);
            } else {
                System.out.println(file + ": Unknown file type");
            }

    //        System.out.println(res);
    //        Duration d = Duration.between(startTimeKMP, endTimeKMP);
    //        System.out.println("It took " + d.toSeconds() + " seconds");
        }


        static boolean matchesKNP(String pat, String txt) {
            int M = pat.length();
            int N = txt.length();

            // create lps[] that will hold the longest
            // prefix suffix values for pattern
            int lps[] = new int[M];
            int j = 0; // index for pat[]


            // Preprocess the pattern (calculate lps[]
            // array)
            computeLPSArray(pat, M, lps);

            int i = 0; // index for txt[]
            while (i < N) {
                if (pat.charAt(j) == txt.charAt(i)) {
                    j++;
                    i++;
                }
                if (j == M) {
    //                System.out.println("Found pattern "
    //                        + "at index " + (i - j));
                    j = lps[j - 1];
                    return true;
                }

                // mismatch after j matches
                else if (i < N && pat.charAt(j) != txt.charAt(i)) {
                    // Do not match lps[0..lps[j-1]] characters,
                    // they will match anyway
                    if (j != 0)
                        j = lps[j - 1];
                    else
                        i = i + 1;
                }
            }
            return false;
        }

        static void computeLPSArray(String pat, int M, int lps[]) {
            // length of the previous longest prefix suffix
            int len = 0;
            int i = 1;
            lps[0] = 0; // lps[0] is always 0

            // the loop calculates lps[i] for i = 1 to M-1
            while (i < M) {
                if (pat.charAt(i) == pat.charAt(len)) {
                    len++;
                    lps[i] = len;
                    i++;
                } else // (pat[i] != pat[len])
                {
                    // this is tricky. Consider the example.
                    // AAACAAAA and i = 7. The idea is similar
                    // to search step.
                    if (len != 0) {
                        len = lps[len - 1];

                        // Also, note that we do not increment
                        // i here
                    } else // if (len == 0)
                    {
                        lps[i] = len;
                        i++;
                    }
                }
            }
        }


    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5488#comment
status: Failed
feedback:
  message: "Exception in test #1\n\njava.lang.ArrayIndexOutOfBoundsException: Index\
    \ 2 out of bounds for length 2\n\tat analyzer.Main.main(Main.java:18)\n\nArguments:\
    \ test_files patterns.db"
  time: Mon, 06 Jun 2022 17:42:49 UTC
record: 4
